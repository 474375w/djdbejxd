local Players = game:GetService("Players")
local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local TeleportCheck = false
local RunService = game:GetService("RunService")

-- 检查 workspace.Filter 出现后再进行判断
local function waitForFilter()
    while not game:GetService("Workspace"):FindFirstChild("Filter") do
        RunService.Heartbeat:Wait() -- 每一帧检查一次
    end
end

-- 等待 Filter 出现后执行逻辑
waitForFilter()

if game:GetService("Workspace"):FindFirstChild("EntityModels") then
    loadstring(game:HttpGet('https://raw.githubusercontent.com/474375w/djdbejxd/refs/heads/main/%E8%8F%9C%E9%B8%9F%E6%88%98%E4%BA%89'))()
else
    loadstring(game:HttpGet('https://raw.githubusercontent.com/474375w/djdbejxd/refs/heads/main/%E8%8F%9C%E9%B8%9F%E6%88%98%E4%BA%89%E9%80%89%E6%8B%A9'))()
end

-- 处理玩家传送事件，确保延时加载
Players.LocalPlayer.OnTeleport:Connect(function(State)
    if not TeleportCheck and queueteleport then
        TeleportCheck = true
        queueteleport([[
            local RunService = game:GetService("RunService")
            local loaded = false
            local connection

            -- 确保游戏加载完成后再执行
            connection = RunService.Heartbeat:Connect(function()
                if game:IsLoaded() then
                    loaded = true
                    connection:Disconnect() -- 断开连接，避免重复检查
                end
            end)

            -- 等待游戏加载完成，或者至少等待 5 秒作为保险
            repeat wait(1) until loaded or time() > 5

            -- 确保 workspace.Filter 出现后再继续执行
            local function waitForFilter()
                while not game:GetService("Workspace"):FindFirstChild("Filter") do
                    RunService.Heartbeat:Wait()
                end
            end
            waitForFilter()

            -- 执行脚本
            loadstring(game:HttpGet('https://raw.githubusercontent.com/474375w/djdbejxd/refs/heads/main/%E8%8F%9C%E9%B8%9F%E6%A1%86%E6%9E%B6'))()
        ]])
    end
end)
